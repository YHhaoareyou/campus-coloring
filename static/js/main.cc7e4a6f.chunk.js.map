{"version":3,"sources":["App.js","Nft.js","img/hiro-marker.png","Scene.js","index.js"],"names":["Layout","styled","Topbar","App","isCanvasOpen","auth","user","displayName","Button","onClick","signOut","e","alert","signInWithRedirect","firebase","GoogleAuthProvider","style","background","Nft","props","entityRef","React","createRef","markerhandler","type","url","this","location","smooth","smoothCount","smoothTolerance","smoothThreshold","id","data-location","images","map","img","src","width","height","position","rotation","Component","Scene","state","locationNames","currentLocation","currentImages","imageUrlsById","db","ref","once","dbData","val","image_urls","locationData","locations","setState","Object","keys","setImages","setLocation","loc","window","AFRAME","components","registerComponent","init","el","sceneEl","addEventListener","target","dataset","console","log","child","snap","push","isImagesLoaded","length","isLocationsLoaded","vr-mode-ui","renderer","embedded","arjs","hiroMarker","alt","name","camera","firebaseApp","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","storage","Root","openCanvas","onAuthStateChanged","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc7e4a6f.chunk.js","sourcesContent":["import \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Button } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\nimport firebase from \"firebase/app\";\n\nconst Layout = styled(\"div\")`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\n\nconst Topbar = styled(\"div\")`\n  width: 100%;\n  text-align: center;\n`;\n\nfunction App({ isCanvasOpen, auth, user }) {\n  const signIn = () => {\n    try {\n      auth.signInWithRedirect(new firebase.auth.GoogleAuthProvider())\n    } catch (e) {\n      alert(e)\n    }\n  }\n\n  const signOut = () => {\n    try {\n      auth.signOut()\n    } catch (e) {\n      alert(e)\n    }\n  }\n\n  return <Layout>\n    <Topbar>\n      {\n        user && user !== \"loading\" && <span>{user.displayName}, welcome! </span>\n      }\n      {\n        user ? (user === \"loading\" ? <h2>Loading...</h2> : <Button onClick={signOut}>Sign out</Button>) : <Button onClick={signIn}>Sign in</Button>\n      }\n    </Topbar>\n    \n    {isCanvasOpen && <canvas style={{background: \"#fff\"}}>ゆびゆび！</canvas>}\n  </Layout>;\n}\n\nexport default App;\n","import React from \"react\";\n\nclass Nft extends React.Component {\n  constructor(props) {\n    super(props);\n    this.entityRef = React.createRef();\n  }\n\n  componentDidMount() {\n    // setTimeout(\n    //   () =>\n    //     this.entityRef.current &&\n    //     this.entityRef.current.setAttribute(\"scale\", { x: 2, y: 2, z: 2 }),\n    //   15000\n    // );\n  }\n\n  render() {\n    return (\n      <a-nft\n        markerhandler\n        type=\"nft\"\n        url={\n          \"https://yhhaoareyou.github.io/campus-coloring/descriptors/\" +\n          this.props.location\n        }\n        smooth=\"true\"\n        smoothCount=\"10\"\n        smoothTolerance=\".01\"\n        smoothThreshold=\"5\"\n        id=\"a-nft\"\n        data-location={this.props.location}\n      >\n        {this.props.images.map((img) => (\n          <a-image\n            src={\"#\" + img.id}\n            width=\"500\"\n            height=\"500\"\n            position=\"150 0 0\"\n            rotation=\"-90 0 0\"\n          ></a-image>\n        ))}\n      </a-nft>\n    );\n  }\n}\n\nexport default Nft;\n","export default __webpack_public_path__ + \"static/media/hiro-marker.81a8bff1.png\";","import React from \"react\";\nimport Nft from \"./Nft\";\nimport hiroMarker from \"./img/hiro-marker.png\";\nimport \"firebase/database\";\nimport \"firebase/storage\";\n\nclass Scene extends React.Component {\n  state = {\n    locationNames: [],\n    currentLocation: \"\",\n    currentImages: [],\n    imageUrlsById: {},\n  };\n\n  async componentDidMount() {\n    const { db } = this.props;\n    const dbData = await db.ref().once(\"value\");\n    const imageUrlsById = dbData.val().image_urls;\n    const locationData = dbData.val().locations;\n    this.setState({\n      imageUrlsById: imageUrlsById,\n      locationNames: Object.keys(locationData),\n    });\n\n    const setImages = (images) => this.setState({ currentImages: images });\n    const setLocation = (loc) => this.setState({ currentLocation: loc });\n\n    if (!window.AFRAME.components.markerhandler) {\n      window.AFRAME.registerComponent(\"markerhandler\", {\n        init: function () {\n          this.el.sceneEl.addEventListener(\"markerFound\", (e) => {\n            const currentLocation = e.target.dataset.location;\n            console.log(currentLocation);\n            setLocation(currentLocation);\n            db.ref(\"locations\")\n              .child(currentLocation)\n              .once(\"value\", (snap) => {\n                var currentImages = [];\n                const images = snap.val();\n                for (var id in images) {\n                  currentImages.push({ ...images[id], id: id });\n                }\n                setImages(currentImages);\n              });\n          });\n\n          this.el.sceneEl.addEventListener(\"markerLost\", (e) => setImages([]));\n        },\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    delete window.AFRAME.components.markerhandler;\n  }\n\n  render() {\n    const {\n      locationNames,\n      currentLocation,\n      currentImages,\n      imageUrlsById,\n    } = this.state;\n    const isImagesLoaded = Object.keys(imageUrlsById).length > 0;\n    const isLocationsLoaded = locationNames.length > 0;\n    return (\n      <a-scene\n        id=\"a-scene\"\n        vr-mode-ui=\"enabled: false;\"\n        renderer=\"logarithmicDepthBuffer: true;\"\n        embedded\n        arjs=\"trackingMethod: best; sourceType: webcam;debugUIEnabled: false;\"\n      >\n        {isImagesLoaded && (\n          <a-assets>\n            <img id=\"hiroMarker\" src={hiroMarker} alt=\"hiroMarker\" />\n            {Object.keys(imageUrlsById).map((id) => (\n              <img key={id} id={id} src={imageUrlsById[id]} alt={id} />\n            ))}\n          </a-assets>\n        )}\n\n        {isImagesLoaded &&\n          isLocationsLoaded &&\n          locationNames.map((name) => (\n            <Nft\n              key={name}\n              location={name}\n              images={\n                currentLocation === name && currentImages.length > 0\n                  ? currentImages\n                  : []\n              }\n            />\n          ))}\n        <a-entity camera></a-entity>\n      </a-scene>\n    );\n  }\n}\n\nexport default Scene;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Scene from \"./Scene\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyAA4zXM0wRBrL1l65NHg_8mQcjg75ew9RQ\",\n  authDomain: \"campus-coloring.firebaseapp.com\",\n  databaseURL: \"https://campus-coloring.firebaseio.com\",\n  projectId: \"campus-coloring\",\n  storageBucket: \"campus-coloring.appspot.com\",\n  messagingSenderId: \"45926036058\",\n  appId: \"1:45926036058:web:a9271137ac86762843de63\",\n  measurementId: \"G-WPPW3TX4QG\",\n});\n\nconst auth = firebaseApp.auth();\nconst database = firebaseApp.database();\nconst storage = firebaseApp.storage();\n\nclass Root extends React.Component {\n  state = {\n    isCanvasOpen: false,\n    user: \"loading\",\n  };\n\n  componentDidMount() {\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({ user });\n      } else {\n        this.setState({ user: null });\n      }\n    });\n  }\n\n  openCanvas = () => this.setState({ isCanvasOpen: true });\n\n  render() {\n    return (\n      <div style={{ width: \"100%\", height: \"100%\" }}>\n        <Scene openCanvas={this.openCanvas} db={database} storage={storage} />\n        <App\n          isCanvasOpen={this.state.isCanvasOpen}\n          auth={auth}\n          user={this.state.user}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n\n// setTimeout(ReactDOM.render(<App />, document.getElementById(\"root\")), 1500);\n"],"sourceRoot":""}