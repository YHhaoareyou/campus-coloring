{"version":3,"sources":["ImageSwitch.js","Footer.js","App.js","Nft.js","img/hiro-marker.png","Scene.js","index.js"],"names":["styled","Grid","ImageSwitch","switchToPrev","switchToNext","Column","Button","Icon","FooterWrapper","Footer","image","openCanvas","width","Segment","name","description","as","labelPosition","color","Label","basic","pointing","onClick","disabled","Layout","InnerLayout","Topbar","Canvas","App","state","isCanvasOpen","currentImg","props","imagesInfo","length","signIn","auth","signInWithRedirect","firebase","GoogleAuthProvider","e","alert","signOut","switchToPrevImage","setState","indexOf","switchToNextImage","prevProps","this","user","displayName","React","Component","Nft","entityRef","createRef","markerhandler","type","url","location","smooth","smoothCount","smoothTolerance","smoothThreshold","id","data-location","images","map","img","src","height","position","rotation","Scene","locationNames","currentLocation","currentImages","imageUrlsById","db","ref","once","dbData","val","image_urls","locationData","locations","Object","keys","setImages","setImagesInfo","setLocation","loc","window","AFRAME","components","registerComponent","init","el","sceneEl","addEventListener","target","dataset","child","snap","push","isImagesLoaded","isLocationsLoaded","vr-mode-ui","renderer","embedded","arjs","hiroMarker","alt","camera","firebaseApp","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","storage","Root","onAuthStateChanged","style","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3cd6b9a7.chunk.js","sourcesContent":["import { Button, Grid, Icon } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\n\nconst ImageSwitchWrapper = styled(Grid)`\n  position: absolute;\n  left: 0;\n  top: 45%;\n  width: 100%;\n  height: 5%;\n`;\n\nconst ImageSwitch = ({ switchToPrev, switchToNext }) => {\n  <ImageSwitchWrapper>\n    <Grid.Column width={1}>\n      <Button onClick={this.switchToPrev}>\n        <Icon name=\"angle left\" />\n      </Button>\n    </Grid.Column>\n    <Grid.Column width={14}></Grid.Column>\n    <Grid.Column width={1}>\n      <Button onClick={this.switchToNext}>\n        <Icon name=\"angle right\" />\n      </Button>\n    </Grid.Column>\n  </ImageSwitchWrapper>;\n};\n\nexport default ImageSwitch;\n","import { Button, Grid, Segment, Icon, Label } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\n\nconst FooterWrapper = styled(Grid)`\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  height: 15%;\n`;\n\nconst Footer = ({ image, openCanvas }) => (\n  <FooterWrapper>\n    <Grid.Column width={8}>\n      <Segment>\n        <h4>{image.name}</h4>\n        <p>{image.description}</p>\n      </Segment>\n    </Grid.Column>\n    <Grid.Column width={2}>\n      <Button as=\"div\" labelPosition=\"right\">\n        <Button color=\"red\">\n          <Icon name=\"heart\" />\n        </Button>\n        <Label as=\"a\" basic color=\"red\" pointing=\"left\">\n          1\n        </Label>\n      </Button>\n    </Grid.Column>\n    <Grid.Column width={3}>\n      <Button color=\"orange\" onClick={openCanvas} disabled>\n        Add your painting on this one\n      </Button>\n    </Grid.Column>\n    <Grid.Column width={3}>\n      <Button color=\"green\" onClick={openCanvas}>\n        Create your new painting\n      </Button>\n    </Grid.Column>\n  </FooterWrapper>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Button } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\nimport firebase from \"firebase/app\";\nimport ImageSwitch from \"./ImageSwitch\";\nimport Footer from \"./Footer\";\n\nconst Layout = styled(\"div\")`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\n\nconst InnerLayout = styled(\"div\")`\n  position: relative;\n  width: 100%;\n  height: 100%;\n`;\n\nconst Topbar = styled(\"div\")`\n  width: 100%;\n  text-align: center;\n`;\n\nconst Canvas = styled(\"canvas\")`\n  background: #fff;\n  width: 100%;\n  height: 80%;\n`;\n\nclass App extends React.Component {\n  state = {\n    isCanvasOpen: false,\n    currentImg:\n      this.props.imagesInfo &&\n      this.props.imagesInfo.length &&\n      this.props.imagesInfo[0],\n  };\n\n  componentDidUpdate(prevProps) {\n    if (\n      this.props.imagesInfo &&\n      prevProps.imagesInfo !== this.props.imagesInfo\n    ) {\n      if (this.props.imagesInfo.length > 0) {\n        this.setState({ currentImg: this.props.imagesInfo[0] });\n      } else {\n        this.setState({ currentImg: null });\n      }\n    }\n  }\n\n  signIn = () => {\n    try {\n      this.props.auth.signInWithRedirect(\n        new firebase.auth.GoogleAuthProvider()\n      );\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  signOut = () => {\n    try {\n      this.props.auth.signOut();\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  switchToPrevImage = () => {\n    const { imagesInfo } = this.props;\n    const { currentImg } = this.state;\n    this.setState({\n      currentImg:\n        imagesInfo.indexOf(currentImg) === 0\n          ? imagesInfo[imagesInfo.length - 1]\n          : imagesInfo[imagesInfo.indexOf(currentImg) - 1],\n    });\n  };\n\n  switchToNextImage = () => {\n    const { imagesInfo } = this.props;\n    const { currentImg } = this.state;\n    this.setState({\n      currentImg:\n        imagesInfo.indexOf(currentImg) + 1 === imagesInfo.length\n          ? imagesInfo[0]\n          : imagesInfo[imagesInfo.indexOf(currentImg) + 1],\n    });\n  };\n\n  render() {\n    const { user } = this.props;\n    const { isCanvasOpen, currentImg } = this.state;\n    return (\n      <Layout>\n        <InnerLayout>\n          <Topbar>\n            {user && user !== \"loading\" && (\n              <span>{user.displayName}, welcome! </span>\n            )}\n            {user ? (\n              user === \"loading\" ? (\n                <h2>Loading...</h2>\n              ) : (\n                <Button onClick={this.signOut}>Sign out</Button>\n              )\n            ) : (\n              <Button onClick={this.signIn}>Sign in</Button>\n            )}\n          </Topbar>\n\n          {isCanvasOpen && <Canvas>ゆびゆび！</Canvas>}\n\n          {currentImg && (\n            <ImageSwitch\n              switchToPrev={this.switchToPrevImage}\n              switchToNext={this.switchToNextImage}\n            />\n          )}\n\n          <Footer\n            image={{ name: \"\", description: \"\" }}\n            openCanvas={() => this.setState({ isCanvasOpen: true })}\n          />\n          {currentImg && (\n            <Footer\n              image={currentImg}\n              openCanvas={() => this.setState({ isCanvasOpen: true })}\n            />\n          )}\n        </InnerLayout>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\n\nclass Nft extends React.Component {\n  constructor(props) {\n    super(props);\n    this.entityRef = React.createRef();\n  }\n\n  componentDidMount() {\n    // setTimeout(\n    //   () =>\n    //     this.entityRef.current &&\n    //     this.entityRef.current.setAttribute(\"scale\", { x: 2, y: 2, z: 2 }),\n    //   15000\n    // );\n  }\n\n  render() {\n    return (\n      <a-nft\n        markerhandler\n        type=\"nft\"\n        url={\n          \"https://yhhaoareyou.github.io/campus-coloring/descriptors/\" +\n          this.props.location\n        }\n        smooth=\"true\"\n        smoothCount=\"10\"\n        smoothTolerance=\".01\"\n        smoothThreshold=\"5\"\n        id=\"a-nft\"\n        data-location={this.props.location}\n      >\n        {this.props.images.map((img) => (\n          <a-image\n            src={\"#\" + img.id}\n            width=\"500\"\n            height=\"500\"\n            position=\"150 0 0\"\n            rotation=\"-90 0 0\"\n            key={img.id}\n          ></a-image>\n        ))}\n      </a-nft>\n    );\n  }\n}\n\nexport default Nft;\n","export default __webpack_public_path__ + \"static/media/hiro-marker.81a8bff1.png\";","import React from \"react\";\nimport Nft from \"./Nft\";\nimport hiroMarker from \"./img/hiro-marker.png\";\nimport \"firebase/database\";\nimport \"firebase/storage\";\n\nclass Scene extends React.Component {\n  state = {\n    locationNames: [],\n    currentLocation: \"\",\n    currentImages: [],\n    imageUrlsById: {},\n  };\n\n  async componentDidMount() {\n    const { db } = this.props;\n    const dbData = await db.ref().once(\"value\");\n    const imageUrlsById = dbData.val().image_urls;\n    const locationData = dbData.val().locations;\n    this.setState({\n      imageUrlsById: imageUrlsById,\n      locationNames: Object.keys(locationData),\n    });\n\n    const setImages = (images) => {\n      this.setState({ currentImages: images });\n      this.props.setImagesInfo(images);\n    };\n    const setLocation = (loc) => this.setState({ currentLocation: loc });\n\n    if (!window.AFRAME.components.markerhandler) {\n      window.AFRAME.registerComponent(\"markerhandler\", {\n        init: function () {\n          this.el.sceneEl.addEventListener(\"markerFound\", (e) => {\n            const currentLocation = e.target.dataset.location;\n            setLocation(currentLocation);\n            db.ref(\"locations\")\n              .child(currentLocation)\n              .once(\"value\", (snap) => {\n                var currentImages = [];\n                const images = snap.val();\n                for (var id in images) {\n                  currentImages.push({ ...images[id], id: id });\n                }\n                setImages(currentImages);\n              });\n          });\n\n          this.el.sceneEl.addEventListener(\"markerLost\", (e) => setImages([]));\n        },\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    delete window.AFRAME.components.markerhandler;\n  }\n\n  render() {\n    const {\n      locationNames,\n      currentLocation,\n      currentImages,\n      imageUrlsById,\n    } = this.state;\n    const isImagesLoaded = Object.keys(imageUrlsById).length > 0;\n    const isLocationsLoaded = locationNames.length > 0;\n    return (\n      <a-scene\n        id=\"a-scene\"\n        vr-mode-ui=\"enabled: false;\"\n        renderer=\"logarithmicDepthBuffer: true;\"\n        embedded\n        arjs=\"trackingMethod: best; sourceType: webcam;debugUIEnabled: false;\"\n      >\n        {isImagesLoaded && (\n          <a-assets>\n            <img id=\"hiroMarker\" src={hiroMarker} alt=\"hiroMarker\" />\n            {Object.keys(imageUrlsById).map((id) => (\n              <img key={id} id={id} src={imageUrlsById[id]} alt={id} />\n            ))}\n          </a-assets>\n        )}\n\n        {isImagesLoaded &&\n          isLocationsLoaded &&\n          locationNames.map((name) => (\n            <Nft\n              key={name}\n              location={name}\n              images={\n                currentLocation === name && currentImages.length > 0\n                  ? currentImages\n                  : []\n              }\n            />\n          ))}\n        <a-entity camera></a-entity>\n      </a-scene>\n    );\n  }\n}\n\nexport default Scene;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Scene from \"./Scene\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyAA4zXM0wRBrL1l65NHg_8mQcjg75ew9RQ\",\n  authDomain: \"campus-coloring.firebaseapp.com\",\n  databaseURL: \"https://campus-coloring.firebaseio.com\",\n  projectId: \"campus-coloring\",\n  storageBucket: \"campus-coloring.appspot.com\",\n  messagingSenderId: \"45926036058\",\n  appId: \"1:45926036058:web:a9271137ac86762843de63\",\n  measurementId: \"G-WPPW3TX4QG\",\n});\n\nconst auth = firebaseApp.auth();\nconst database = firebaseApp.database();\nconst storage = firebaseApp.storage();\n\nclass Root extends React.Component {\n  state = {\n    imagesInfo: null,\n    user: \"loading\",\n  };\n\n  componentDidMount() {\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({ user });\n      } else {\n        this.setState({ user: null });\n      }\n    });\n  }\n\n  setImagesInfo = (images) => this.setState({ imagesInfo: images });\n\n  render() {\n    return (\n      <div style={{ width: \"100%\", height: \"100%\" }}>\n        <Scene\n          db={database}\n          storage={storage}\n          setImagesInfo={this.setImagesInfo}\n        />\n        <App\n          imagesInfo={this.state.imagesInfo}\n          auth={auth}\n          user={this.state.user}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n\n// setTimeout(ReactDOM.render(<App />, document.getElementById(\"root\")), 1500);\n"],"sourceRoot":""}