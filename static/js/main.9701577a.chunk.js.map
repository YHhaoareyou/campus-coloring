{"version":3,"sources":["App.js","Nft.js","img/hiro-marker.png","Scene.js","index.js"],"names":["Layout","styled","Topbar","App","isCanvasOpen","auth","user","displayName","Button","onClick","signOut","e","alert","signInWithRedirect","firebase","GoogleAuthProvider","style","background","Nft","props","state","isImgLoaded","entityRef","React","createRef","setTimeout","current","setAttribute","x","y","z","markerhandler","type","url","smooth","smoothCount","smoothTolerance","smoothThreshold","id","data-location","this","location","src","width","height","position","rotation","ref","Component","Scene","locationNames","currentImages","db","once","locationsSnap","locationData","val","console","log","setState","Object","keys","setImages","images","window","AFRAME","components","registerComponent","init","el","sceneEl","addEventListener","target","dataset","snap","push","vr-mode-ui","renderer","embedded","arjs","hiroMarker","alt","map","img","name","i","camera","firebaseApp","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","storage","Root","openCanvas","onAuthStateChanged","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9701577a.chunk.js","sourcesContent":["import \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Button } from \"semantic-ui-react\";\nimport styled from \"styled-components\";\nimport firebase from \"firebase/app\";\n\nconst Layout = styled(\"div\")`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\n\nconst Topbar = styled(\"div\")`\n  width: 100%;\n  text-align: center;\n`;\n\nfunction App({ isCanvasOpen, auth, user }) {\n  const signIn = () => {\n    try {\n      auth.signInWithRedirect(new firebase.auth.GoogleAuthProvider())\n    } catch (e) {\n      alert(e)\n    }\n  }\n\n  const signOut = () => {\n    try {\n      auth.signOut()\n    } catch (e) {\n      alert(e)\n    }\n  }\n\n  return <Layout>\n    <Topbar>\n      {\n        user && user !== \"loading\" && <span>{user.displayName}, welcome! </span>\n      }\n      {\n        user ? (user === \"loading\" ? <h2>Loading...</h2> : <Button onClick={signOut}>Sign out</Button>) : <Button onClick={signIn}>Sign in</Button>\n      }\n    </Topbar>\n    \n    {isCanvasOpen && <canvas style={{background: \"#fff\"}}>ゆびゆび！</canvas>}\n  </Layout>;\n}\n\nexport default App;\n","import React from \"react\";\n\nconst entities = [\n  {\n    gltfModel:\n      \"https://arjs-cors-proxy.herokuapp.com/https://raw.githack.com/AR-js-org/AR.js/master/aframe/examples/image-tracking/nft/trex/scene.gltf\",\n    scale: \"3 3 3\",\n    position: \"150 100 -100\",\n    rotation: \"-90 0 0\",\n  },\n  {\n    gltfModel:\n      \"https://arjs-cors-proxy.herokuapp.com/https://raw.githack.com/AR-js-org/AR.js/master/aframe/examples/image-tracking/nft/trex/scene.gltf\",\n    scale: \"2 2 2\",\n    position: \"100 100 0\",\n    rotation: \"-90 0 0\",\n  },\n];\n\nclass Nft extends React.Component {\n  constructor(props) {\n    super(props);\n    this.entityRef = React.createRef();\n  }\n\n  state = {\n    isImgLoaded: true,\n  };\n\n  componentDidMount() {\n    // setTimeout(() => this.setState({ isImgLoaded: true }), 10000);\n    setTimeout(\n      () =>\n        this.entityRef.current &&\n        this.entityRef.current.setAttribute(\"scale\", { x: 5, y: 5, z: 5 }),\n      15000\n    );\n  }\n  // url=\"/descriptors/takeuchi\"\n  // url=\"https://arjs-cors-proxy.herokuapp.com/https://raw.githack.com/AR-js-org/AR.js/master/aframe/examples/image-tracking/nft/trex/trex-image/trex\"\n  // https://firebasestorage.googleapis.com/v0/b/campus-coloring.appspot.com/o/descriptors%2Ftakeuchi\n\n  render() {\n    return (\n      <a-nft\n        markerhandler\n        type=\"nft\"\n        url=\"https://yhhaoareyou.github.io/campus-coloring/descriptors/trex\"\n        smooth=\"true\"\n        smoothCount=\"10\"\n        smoothTolerance=\".01\"\n        smoothThreshold=\"5\"\n        id=\"a-nft\"\n        data-location={this.props.location}\n      >\n        {/*entities.map((e, i) => (\n          <a-entity\n            key={i}\n            gltf-model={e.gltfModel}\n            scale={e.scale}\n            position={e.position}\n            rotation={e.rotation}\n          ></a-entity>\n        ))*/}\n        {this.state.isImgLoaded && (\n          <a-image\n            src=\"#hiroMarker\"\n            width=\"200\"\n            height=\"200\"\n            position=\"100 0 0\"\n            rotation=\"-90 0 0\"\n            ref={this.entityRef}\n          ></a-image>\n        )}\n      </a-nft>\n    );\n  }\n}\n\nexport default Nft;\n","export default __webpack_public_path__ + \"static/media/hiro-marker.81a8bff1.png\";","import React from \"react\";\nimport Nft from \"./Nft\";\nimport hiroMarker from \"./img/hiro-marker.png\";\nimport \"firebase/database\";\nimport \"firebase/storage\";\n\nclass Scene extends React.Component {\n  state = {\n    isImgLoaded: true,\n    locationNames: [],\n    currentImages: [],\n  };\n\n  async componentDidMount() {\n    const { db } = this.props;\n    const locationsSnap = await db.ref().once(\"value\");\n    const locationData = locationsSnap.val();\n    console.log(locationData);\n    this.setState({ locationNames: Object.keys(locationData) });\n\n    const setImages = (images) => {\n      this.setState({ currentImages: images });\n    };\n\n    if (!window.AFRAME.components.markerhandler) {\n      window.AFRAME.registerComponent(\"markerhandler\", {\n        init: function () {\n          this.el.sceneEl.addEventListener(\"markerFound\", (e) => {\n            db.ref(e.target.dataset.location).once(\"value\", (snap) => {\n              var currentImages = [];\n              const images = snap.val();\n              for (var id in images) {\n                currentImages.push({ ...images[id], id: id });\n              }\n              setImages(currentImages);\n            });\n          });\n\n          this.el.sceneEl.addEventListener(\"markerLost\", (e) => setImages([]));\n        },\n      });\n    }\n\n    // setTimeout(() => this.setState({ isImgLoaded: true }), 5000);\n  }\n\n  componentWillUnmount() {\n    delete window.AFRAME.components.markerhandler;\n  }\n\n  render() {\n    const { isImgLoaded, locationNames, currentImages } = this.state;\n    return (\n      <a-scene\n        id=\"a-scene\"\n        vr-mode-ui=\"enabled: false;\"\n        renderer=\"logarithmicDepthBuffer: true;\"\n        embedded\n        arjs=\"trackingMethod: best; sourceType: webcam;debugUIEnabled: false;\"\n      >\n        <a-assets>\n          {isImgLoaded && (\n            <img id=\"hiroMarker\" src={hiroMarker} alt=\"hiroMarker\" />\n          )}\n          {currentImages &&\n            currentImages.map((img) => (\n              <img key={img.id} id={img.id} src={img.url} alt={img.name} />\n            ))}\n        </a-assets>\n        {locationNames &&\n          locationNames.map((name, i) => <Nft location={name} key={i} />)}\n        <a-entity camera></a-entity>\n      </a-scene>\n    );\n  }\n}\n\nexport default Scene;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Scene from \"./Scene\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyAA4zXM0wRBrL1l65NHg_8mQcjg75ew9RQ\",\n  authDomain: \"campus-coloring.firebaseapp.com\",\n  databaseURL: \"https://campus-coloring.firebaseio.com\",\n  projectId: \"campus-coloring\",\n  storageBucket: \"campus-coloring.appspot.com\",\n  messagingSenderId: \"45926036058\",\n  appId: \"1:45926036058:web:a9271137ac86762843de63\",\n  measurementId: \"G-WPPW3TX4QG\"\n});\n\nconst auth = firebaseApp.auth();\nconst database = firebaseApp.database();\nconst storage = firebaseApp.storage();\n\nclass Root extends React.Component {\n  state = {\n    isCanvasOpen: false,\n    user: \"loading\"\n  };\n\n  componentDidMount () {\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({ user })\n      } else {\n        this.setState({ user: null })\n      }\n    });\n\n    // auth\n    //   .getRedirectResult()\n    //   .then((result) => {\n    //     // The signed-in user info.\n    //     var user = result.user;\n    //     if (user) {\n    //       alert(user)\n    //     } else {\n    //       alert(\"not signed in\")\n    //     }\n    //   })\n    //   .catch((error) => {\n    //     console.log(error);\n    //   });\n  }\n\n  openCanvas = () => this.setState({ isCanvasOpen: true });\n\n  render() {\n    return (\n      <div style={{width: \"100%\", height: \"100%\"}}>\n        <Scene openCanvas={this.openCanvas} db={database} storage={storage} />\n        <App isCanvasOpen={this.state.isCanvasOpen} auth={auth} user={this.state.user} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n\n// setTimeout(ReactDOM.render(<App />, document.getElementById(\"root\")), 1500);\n"],"sourceRoot":""}